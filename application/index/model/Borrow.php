<?php

namespace app\index\model;

use think\Exception;
use think\Model;

class Borrow extends Common
{

    protected $hidden
        = ['modify_user', 'modify_time', 'isdel'];

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 借阅图书


    /**
     * 借书
     *
     * @param $uid
     * @param $bid  图书id
     * @param $bsid 图书信息id
     * @param $us   用户状态
     *
     * @return bool
     * @throws \think\exception\PDOException
     */
    public function borrow($uid, $bid, $bsid, $us)
    {
        if (empty($uid) || empty($bid) || empty($bsid) || empty($us)) {
            return false;
        }
        $this->startTrans();
        try {
            $data = [
                'bid'         => $bsid,
                'pid'         => $bid,
                'ustate'      => $us,
                'create_user' => $uid,
            ];
            $this->data($data)->save();
            $this->commit();
        } catch (Exception $exception) {
            $this->rollback();

            return false;
        }
    }


    /**
     * @param $borrow_id
     *
     * @return array|bool
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getLeaseInfo($borrow_id)
    {
        if (empty($borrow_id)) {
            return false;
        }
        $data = $this->join('books', 'books.id=bid')->where(
            'borrow.id', $borrow_id
        )->field(
            'books.name book_Name,books.number book_No,books.press,borrow.create_time borrow_start'
        )->find();
        if ( ! empty($data)) {
            return $data->toArray();
        }

        return false;
    }
}
